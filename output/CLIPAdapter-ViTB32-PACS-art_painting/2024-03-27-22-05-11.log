*** Config ***
***************
** Arguments **
***************
dataset: PACS
gpu: 0
model: CLIPAdapter
model_config_file: config/clipadapter.yaml
output_dir: output/CLIPAdapter-ViTB32-PACS-art_painting
root: ./data/
seed: 134
source_domains: ['cartoon', 'photo', 'sketch']
target_domains: ['art_painting']
************
** Config **
************
DATALOADER:
  NUM_WORKERS: 8
  TEST:
    BATCH_SIZE: 64
    SAMPLER: SequentialSampler
  TRAIN:
    BATCH_SIZE: 64
    SAMPLER: RandomSampler
DATASET:
  NAME: PACS
  ROOT: ./data/
  SOURCE_DOMAINS: ['cartoon', 'photo', 'sketch']
  SUBSAMPLE_CLASSES: all
  TARGET_DOMAINS: ['art_painting']
GPU: 0
INPUT:
  COLORJITTER_B: 0.4
  COLORJITTER_C: 0.4
  COLORJITTER_H: 0.1
  COLORJITTER_S: 0.4
  CROP_PADDING: 4
  CUTOUT_LEN: 16
  CUTOUT_N: 1
  GB_K: 21
  GB_P: 0.5
  GN_MEAN: 0.0
  GN_STD: 0.15
  INTERPOLATION: bicubic
  PIXEL_MEAN: [0.48145466, 0.4578275, 0.40821073]
  PIXEL_STD: [0.26862954, 0.26130258, 0.27577711]
  RANDAUGMENT_M: 10
  RANDAUGMENT_N: 2
  RGS_P: 0.2
  RRCROP_SCALE: (0.08, 1.0)
  SIZE: (224, 224)
  TRANSFORMS: ['random_resized_crop', 'random_flip', 'normalize']
MODEL:
  CLIPAdapter:
    BACKBONE: ViT-B/32
  NAME: CLIPAdapter
OPTIM:
  ADAM_BETA1: 0.9
  ADAM_BETA2: 0.999
  GAMMA: 0.1
  LR: 0.002
  LR_SCHEDULER: Cosine
  MAX_EPOCH: 50
  MOMENTUM: 0.9
  NAME: sgd
  SGD_DAMPENING: 0
  SGD_NESTEROV: False
  STEP_SIZE: -1
  WARMUP_CONS_LR: 1e-05
  WARMUP_EPOCH: 1
  WARMUP_MIN_LR: 1e-05
  WARMUP_TYPE: constant
  WEIGHT_DECAY: 0.0005
OUTPUT_DIR: output/CLIPAdapter-ViTB32-PACS-art_painting
SEED: 134
TEST:
  EVALUATOR: Classification
  FINAL_Model: last_step
  SPLIT: Test
TRAIN:
  PRINT_FREQ: 5
Build Trainer: CLIPAdapter
Build Dataset: PACS
Transform for Train: Compose(
    RandomResizedCrop(size=(224, 224), scale=(0.08, 1.0), ratio=(0.75, 1.3333), interpolation=bicubic, antialias=True)
    RandomHorizontalFlip(p=0.5)
    ToTensor()
    Normalize(mean=[0.48145466, 0.4578275, 0.40821073], std=[0.26862954, 0.26130258, 0.27577711])
)
Transform for Test: Compose(
    Resize(size=224, interpolation=bicubic, max_size=None, antialias=True)
    CenterCrop(size=(224, 224))
    ToTensor()
    Normalize(mean=[0.48145466, 0.4578275, 0.40821073], std=[0.26862954, 0.26130258, 0.27577711])
)
--------------  ------------------------------
Dataset         PACS
Source Domains  ['cartoon', 'photo', 'sketch']
Target Domains  ['art_painting']
# Classes       7
# Train Data    7,942
# Val Data      806
# Test Data     2,048
--------------  ------------------------------
Loading CLIP Backbone: ViT-B/32
Building Custom CLIP
Class: ['dog', 'elephant', 'giraffe', 'guitar', 'horse', 'house', 'person']
Domains: ['cartoon', 'photo', 'sketch']
{'cartoon': ['a picture of a cartoon dog.', 'a picture of a cartoon elephant.', 'a picture of a cartoon giraffe.', 'a picture of a cartoon guitar.', 'a picture of a cartoon horse.', 'a picture of a cartoon house.', 'a picture of a cartoon person.'], 'photo': ['a picture of a photo dog.', 'a picture of a photo elephant.', 'a picture of a photo giraffe.', 'a picture of a photo guitar.', 'a picture of a photo horse.', 'a picture of a photo house.', 'a picture of a photo person.'], 'sketch': ['a picture of a sketch dog.', 'a picture of a sketch elephant.', 'a picture of a sketch giraffe.', 'a picture of a sketch guitar.', 'a picture of a sketch horse.', 'a picture of a sketch house.', 'a picture of a sketch person.']}
Encoded prompts (cartoon): {'cartoon': tensor([[ 0.0121,  0.0077, -0.0332,  ..., -0.0228, -0.0125,  0.0219],
        [-0.0028,  0.0028, -0.0092,  ..., -0.0011,  0.0078,  0.0374],
        [ 0.0187, -0.0066, -0.0338,  ..., -0.0048, -0.0202, -0.0085],
        ...,
        [ 0.0010,  0.0093, -0.0051,  ..., -0.0157, -0.0022,  0.0104],
        [-0.0029,  0.0059,  0.0048,  ..., -0.0195, -0.0060, -0.0013],
        [-0.0036,  0.0185, -0.0177,  ..., -0.0428, -0.0072, -0.0013]],
       device='cuda:0', dtype=torch.float16), 'photo': tensor([[ 0.0228,  0.0416, -0.0377,  ..., -0.0820, -0.0252,  0.0203],
        [ 0.0073,  0.0297, -0.0122,  ..., -0.0445, -0.0020,  0.0318],
        [ 0.0240,  0.0198, -0.0415,  ..., -0.0452, -0.0294, -0.0078],
        ...,
        [ 0.0157,  0.0311, -0.0157,  ..., -0.0651, -0.0243,  0.0078],
        [-0.0037,  0.0155, -0.0159,  ..., -0.0697, -0.0306, -0.0125],
        [ 0.0129,  0.0236, -0.0192,  ..., -0.0815, -0.0204, -0.0023]],
       device='cuda:0', dtype=torch.float16), 'sketch': tensor([[ 0.0045,  0.0012, -0.0389,  ..., -0.0442, -0.0241, -0.0079],
        [ 0.0117, -0.0172, -0.0182,  ..., -0.0056,  0.0075,  0.0037],
        [ 0.0256, -0.0295, -0.0492,  ..., -0.0205, -0.0292, -0.0388],
        ...,
        [ 0.0087, -0.0015, -0.0202,  ..., -0.0214, -0.0091, -0.0145],
        [ 0.0086,  0.0012, -0.0129,  ..., -0.0445, -0.0225, -0.0295],
        [ 0.0068, -0.0049, -0.0189,  ..., -0.0630, -0.0165, -0.0311]],
       device='cuda:0', dtype=torch.float16)}
