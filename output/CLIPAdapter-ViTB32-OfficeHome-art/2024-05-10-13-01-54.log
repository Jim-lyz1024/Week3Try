*** Config ***
***************
** Arguments **
***************
dataset: OfficeHome
gpu: 1
model: CLIPAdapter
model_config_file: config/clipadapter.yaml
output_dir: output/CLIPAdapter-ViTB32-OfficeHome-art
root: ./data/
seed: 134
source_domains: ['art', 'product', 'real_world']
target_domains: ['clipart']
************
** Config **
************
DATALOADER:
  NUM_WORKERS: 8
  TEST:
    BATCH_SIZE: 64
    SAMPLER: SequentialSampler
  TRAIN:
    BATCH_SIZE: 64
    SAMPLER: RandomSampler
DATASET:
  NAME: OfficeHome
  ROOT: ./data/
  SOURCE_DOMAINS: ['art', 'product', 'real_world']
  SUBSAMPLE_CLASSES: all
  TARGET_DOMAINS: ['clipart']
GPU: 1
INPUT:
  COLORJITTER_B: 0.4
  COLORJITTER_C: 0.4
  COLORJITTER_H: 0.1
  COLORJITTER_S: 0.4
  CROP_PADDING: 4
  CUTOUT_LEN: 16
  CUTOUT_N: 1
  GB_K: 21
  GB_P: 0.5
  GN_MEAN: 0.0
  GN_STD: 0.15
  INTERPOLATION: bicubic
  PIXEL_MEAN: [0.48145466, 0.4578275, 0.40821073]
  PIXEL_STD: [0.26862954, 0.26130258, 0.27577711]
  RANDAUGMENT_M: 10
  RANDAUGMENT_N: 2
  RGS_P: 0.2
  RRCROP_SCALE: (0.08, 1.0)
  SIZE: (224, 224)
  TRANSFORMS: ['random_resized_crop', 'random_flip', 'normalize']
MODEL:
  CLIPAdapter:
    BACKBONE: ViT-B/32
  NAME: CLIPAdapter
OPTIM:
  ADAM_BETA1: 0.9
  ADAM_BETA2: 0.999
  GAMMA: 0.1
  LR: 0.002
  LR_SCHEDULER: Cosine
  MAX_EPOCH: 1
  MOMENTUM: 0.9
  NAME: sgd
  SGD_DAMPENING: 0
  SGD_NESTEROV: False
  STEP_SIZE: -1
  WARMUP_CONS_LR: 1e-05
  WARMUP_EPOCH: 1
  WARMUP_MIN_LR: 1e-05
  WARMUP_TYPE: constant
  WEIGHT_DECAY: 0.0005
OUTPUT_DIR: output/CLIPAdapter-ViTB32-OfficeHome-art
SEED: 134
TEST:
  EVALUATOR: Classification
  FINAL_Model: last_step
  SPLIT: Test
TRAIN:
  PRINT_FREQ: 5
Build Trainer: CLIPAdapter
Build Dataset: OfficeHome
Transform for Train: Compose(
    RandomResizedCrop(size=(224, 224), scale=(0.08, 1.0), ratio=(0.75, 1.3333), interpolation=bicubic, antialias=True)
    RandomHorizontalFlip(p=0.5)
    ToTensor()
    Normalize(mean=[0.48145466, 0.4578275, 0.40821073], std=[0.26862954, 0.26130258, 0.27577711])
)
Transform for Test: Compose(
    Resize(size=224, interpolation=bicubic, max_size=None, antialias=True)
    CenterCrop(size=(224, 224))
    ToTensor()
    Normalize(mean=[0.48145466, 0.4578275, 0.40821073], std=[0.26862954, 0.26130258, 0.27577711])
)
--------------  --------------------------------
Dataset         OfficeHome
Source Domains  ['art', 'product', 'real_world']
Target Domains  ['clipart']
# Classes       65
# Train Data    10,023
# Val Data      1,200
# Test Data     4,365
--------------  --------------------------------
Loading CLIP Backbone: ViT-B/32
Building Custom CLIP
{'original': ['a picture of a alarm clock.', 'a picture of a backpack.', 'a picture of a batteries.', 'a picture of a bed.', 'a picture of a bike.', 'a picture of a bottle.', 'a picture of a bucket.', 'a picture of a calculator.', 'a picture of a calendar.', 'a picture of a candles.', 'a picture of a chair.', 'a picture of a clipboards.', 'a picture of a computer.', 'a picture of a couch.', 'a picture of a curtains.', 'a picture of a desk lamp.', 'a picture of a drill.', 'a picture of a eraser.', 'a picture of a exit sign.', 'a picture of a fan.', 'a picture of a file cabinet.', 'a picture of a flipflops.', 'a picture of a flowers.', 'a picture of a folder.', 'a picture of a fork.', 'a picture of a glasses.', 'a picture of a hammer.', 'a picture of a helmet.', 'a picture of a kettle.', 'a picture of a keyboard.', 'a picture of a knives.', 'a picture of a lamp shade.', 'a picture of a laptop.', 'a picture of a marker.', 'a picture of a monitor.', 'a picture of a mop.', 'a picture of a mouse.', 'a picture of a mug.', 'a picture of a notebook.', 'a picture of a oven.', 'a picture of a pan.', 'a picture of a paper clip.', 'a picture of a pen.', 'a picture of a pencil.', 'a picture of a postit notes.', 'a picture of a printer.', 'a picture of a push pin.', 'a picture of a radio.', 'a picture of a refrigerator.', 'a picture of a ruler.', 'a picture of a scissors.', 'a picture of a screwdriver.', 'a picture of a shelf.', 'a picture of a sink.', 'a picture of a sneakers.', 'a picture of a soda.', 'a picture of a speaker.', 'a picture of a spoon.', 'a picture of a tv.', 'a picture of a table.', 'a picture of a telephone.', 'a picture of a toothbrush.', 'a picture of a toys.', 'a picture of a trash can.', 'a picture of a webcam.'], 'art': ['a picture of a art alarm clock.', 'a picture of a art backpack.', 'a picture of a art batteries.', 'a picture of a art bed.', 'a picture of a art bike.', 'a picture of a art bottle.', 'a picture of a art bucket.', 'a picture of a art calculator.', 'a picture of a art calendar.', 'a picture of a art candles.', 'a picture of a art chair.', 'a picture of a art clipboards.', 'a picture of a art computer.', 'a picture of a art couch.', 'a picture of a art curtains.', 'a picture of a art desk lamp.', 'a picture of a art drill.', 'a picture of a art eraser.', 'a picture of a art exit sign.', 'a picture of a art fan.', 'a picture of a art file cabinet.', 'a picture of a art flipflops.', 'a picture of a art flowers.', 'a picture of a art folder.', 'a picture of a art fork.', 'a picture of a art glasses.', 'a picture of a art hammer.', 'a picture of a art helmet.', 'a picture of a art kettle.', 'a picture of a art keyboard.', 'a picture of a art knives.', 'a picture of a art lamp shade.', 'a picture of a art laptop.', 'a picture of a art marker.', 'a picture of a art monitor.', 'a picture of a art mop.', 'a picture of a art mouse.', 'a picture of a art mug.', 'a picture of a art notebook.', 'a picture of a art oven.', 'a picture of a art pan.', 'a picture of a art paper clip.', 'a picture of a art pen.', 'a picture of a art pencil.', 'a picture of a art postit notes.', 'a picture of a art printer.', 'a picture of a art push pin.', 'a picture of a art radio.', 'a picture of a art refrigerator.', 'a picture of a art ruler.', 'a picture of a art scissors.', 'a picture of a art screwdriver.', 'a picture of a art shelf.', 'a picture of a art sink.', 'a picture of a art sneakers.', 'a picture of a art soda.', 'a picture of a art speaker.', 'a picture of a art spoon.', 'a picture of a art tv.', 'a picture of a art table.', 'a picture of a art telephone.', 'a picture of a art toothbrush.', 'a picture of a art toys.', 'a picture of a art trash can.', 'a picture of a art webcam.'], 'product': ['a picture of a product alarm clock.', 'a picture of a product backpack.', 'a picture of a product batteries.', 'a picture of a product bed.', 'a picture of a product bike.', 'a picture of a product bottle.', 'a picture of a product bucket.', 'a picture of a product calculator.', 'a picture of a product calendar.', 'a picture of a product candles.', 'a picture of a product chair.', 'a picture of a product clipboards.', 'a picture of a product computer.', 'a picture of a product couch.', 'a picture of a product curtains.', 'a picture of a product desk lamp.', 'a picture of a product drill.', 'a picture of a product eraser.', 'a picture of a product exit sign.', 'a picture of a product fan.', 'a picture of a product file cabinet.', 'a picture of a product flipflops.', 'a picture of a product flowers.', 'a picture of a product folder.', 'a picture of a product fork.', 'a picture of a product glasses.', 'a picture of a product hammer.', 'a picture of a product helmet.', 'a picture of a product kettle.', 'a picture of a product keyboard.', 'a picture of a product knives.', 'a picture of a product lamp shade.', 'a picture of a product laptop.', 'a picture of a product marker.', 'a picture of a product monitor.', 'a picture of a product mop.', 'a picture of a product mouse.', 'a picture of a product mug.', 'a picture of a product notebook.', 'a picture of a product oven.', 'a picture of a product pan.', 'a picture of a product paper clip.', 'a picture of a product pen.', 'a picture of a product pencil.', 'a picture of a product postit notes.', 'a picture of a product printer.', 'a picture of a product push pin.', 'a picture of a product radio.', 'a picture of a product refrigerator.', 'a picture of a product ruler.', 'a picture of a product scissors.', 'a picture of a product screwdriver.', 'a picture of a product shelf.', 'a picture of a product sink.', 'a picture of a product sneakers.', 'a picture of a product soda.', 'a picture of a product speaker.', 'a picture of a product spoon.', 'a picture of a product tv.', 'a picture of a product table.', 'a picture of a product telephone.', 'a picture of a product toothbrush.', 'a picture of a product toys.', 'a picture of a product trash can.', 'a picture of a product webcam.'], 'real_world': ['a picture of a real world alarm clock.', 'a picture of a real world backpack.', 'a picture of a real world batteries.', 'a picture of a real world bed.', 'a picture of a real world bike.', 'a picture of a real world bottle.', 'a picture of a real world bucket.', 'a picture of a real world calculator.', 'a picture of a real world calendar.', 'a picture of a real world candles.', 'a picture of a real world chair.', 'a picture of a real world clipboards.', 'a picture of a real world computer.', 'a picture of a real world couch.', 'a picture of a real world curtains.', 'a picture of a real world desk lamp.', 'a picture of a real world drill.', 'a picture of a real world eraser.', 'a picture of a real world exit sign.', 'a picture of a real world fan.', 'a picture of a real world file cabinet.', 'a picture of a real world flipflops.', 'a picture of a real world flowers.', 'a picture of a real world folder.', 'a picture of a real world fork.', 'a picture of a real world glasses.', 'a picture of a real world hammer.', 'a picture of a real world helmet.', 'a picture of a real world kettle.', 'a picture of a real world keyboard.', 'a picture of a real world knives.', 'a picture of a real world lamp shade.', 'a picture of a real world laptop.', 'a picture of a real world marker.', 'a picture of a real world monitor.', 'a picture of a real world mop.', 'a picture of a real world mouse.', 'a picture of a real world mug.', 'a picture of a real world notebook.', 'a picture of a real world oven.', 'a picture of a real world pan.', 'a picture of a real world paper clip.', 'a picture of a real world pen.', 'a picture of a real world pencil.', 'a picture of a real world postit notes.', 'a picture of a real world printer.', 'a picture of a real world push pin.', 'a picture of a real world radio.', 'a picture of a real world refrigerator.', 'a picture of a real world ruler.', 'a picture of a real world scissors.', 'a picture of a real world screwdriver.', 'a picture of a real world shelf.', 'a picture of a real world sink.', 'a picture of a real world sneakers.', 'a picture of a real world soda.', 'a picture of a real world speaker.', 'a picture of a real world spoon.', 'a picture of a real world tv.', 'a picture of a real world table.', 'a picture of a real world telephone.', 'a picture of a real world toothbrush.', 'a picture of a real world toys.', 'a picture of a real world trash can.', 'a picture of a real world webcam.']}
{'original': ['a picture of a alarm clock.', 'a picture of a backpack.', 'a picture of a batteries.', 'a picture of a bed.', 'a picture of a bike.', 'a picture of a bottle.', 'a picture of a bucket.', 'a picture of a calculator.', 'a picture of a calendar.', 'a picture of a candles.', 'a picture of a chair.', 'a picture of a clipboards.', 'a picture of a computer.', 'a picture of a couch.', 'a picture of a curtains.', 'a picture of a desk lamp.', 'a picture of a drill.', 'a picture of a eraser.', 'a picture of a exit sign.', 'a picture of a fan.', 'a picture of a file cabinet.', 'a picture of a flipflops.', 'a picture of a flowers.', 'a picture of a folder.', 'a picture of a fork.', 'a picture of a glasses.', 'a picture of a hammer.', 'a picture of a helmet.', 'a picture of a kettle.', 'a picture of a keyboard.', 'a picture of a knives.', 'a picture of a lamp shade.', 'a picture of a laptop.', 'a picture of a marker.', 'a picture of a monitor.', 'a picture of a mop.', 'a picture of a mouse.', 'a picture of a mug.', 'a picture of a notebook.', 'a picture of a oven.', 'a picture of a pan.', 'a picture of a paper clip.', 'a picture of a pen.', 'a picture of a pencil.', 'a picture of a postit notes.', 'a picture of a printer.', 'a picture of a push pin.', 'a picture of a radio.', 'a picture of a refrigerator.', 'a picture of a ruler.', 'a picture of a scissors.', 'a picture of a screwdriver.', 'a picture of a shelf.', 'a picture of a sink.', 'a picture of a sneakers.', 'a picture of a soda.', 'a picture of a speaker.', 'a picture of a spoon.', 'a picture of a tv.', 'a picture of a table.', 'a picture of a telephone.', 'a picture of a toothbrush.', 'a picture of a toys.', 'a picture of a trash can.', 'a picture of a webcam.'], 'clipart': ['a picture of a clipart alarm clock.', 'a picture of a clipart backpack.', 'a picture of a clipart batteries.', 'a picture of a clipart bed.', 'a picture of a clipart bike.', 'a picture of a clipart bottle.', 'a picture of a clipart bucket.', 'a picture of a clipart calculator.', 'a picture of a clipart calendar.', 'a picture of a clipart candles.', 'a picture of a clipart chair.', 'a picture of a clipart clipboards.', 'a picture of a clipart computer.', 'a picture of a clipart couch.', 'a picture of a clipart curtains.', 'a picture of a clipart desk lamp.', 'a picture of a clipart drill.', 'a picture of a clipart eraser.', 'a picture of a clipart exit sign.', 'a picture of a clipart fan.', 'a picture of a clipart file cabinet.', 'a picture of a clipart flipflops.', 'a picture of a clipart flowers.', 'a picture of a clipart folder.', 'a picture of a clipart fork.', 'a picture of a clipart glasses.', 'a picture of a clipart hammer.', 'a picture of a clipart helmet.', 'a picture of a clipart kettle.', 'a picture of a clipart keyboard.', 'a picture of a clipart knives.', 'a picture of a clipart lamp shade.', 'a picture of a clipart laptop.', 'a picture of a clipart marker.', 'a picture of a clipart monitor.', 'a picture of a clipart mop.', 'a picture of a clipart mouse.', 'a picture of a clipart mug.', 'a picture of a clipart notebook.', 'a picture of a clipart oven.', 'a picture of a clipart pan.', 'a picture of a clipart paper clip.', 'a picture of a clipart pen.', 'a picture of a clipart pencil.', 'a picture of a clipart postit notes.', 'a picture of a clipart printer.', 'a picture of a clipart push pin.', 'a picture of a clipart radio.', 'a picture of a clipart refrigerator.', 'a picture of a clipart ruler.', 'a picture of a clipart scissors.', 'a picture of a clipart screwdriver.', 'a picture of a clipart shelf.', 'a picture of a clipart sink.', 'a picture of a clipart sneakers.', 'a picture of a clipart soda.', 'a picture of a clipart speaker.', 'a picture of a clipart spoon.', 'a picture of a clipart tv.', 'a picture of a clipart table.', 'a picture of a clipart telephone.', 'a picture of a clipart toothbrush.', 'a picture of a clipart toys.', 'a picture of a clipart trash can.', 'a picture of a clipart webcam.']}
key:original
v:tensor([[ 0.0156, -0.0032, -0.0414,  ..., -0.0294, -0.0303, -0.0281],
        [ 0.0125, -0.0158, -0.0348,  ..., -0.0420, -0.0307, -0.0114],
        [-0.0072, -0.0067, -0.0241,  ..., -0.0024,  0.0094, -0.0162],
        ...,
        [-0.0173,  0.0335,  0.0101,  ..., -0.0431, -0.0479, -0.0128],
        [-0.0162,  0.0161, -0.0171,  ..., -0.0465, -0.0039, -0.0006],
        [ 0.0048,  0.0090, -0.0262,  ..., -0.0002,  0.0074, -0.0061]],
       device='cuda:1', dtype=torch.float16)
key:art
v:tensor([[ 2.6108e-02, -3.8838e-04, -1.3939e-02,  ..., -1.8707e-02,
         -2.9922e-02, -2.2888e-02],
        [ 3.8025e-02, -1.2558e-02, -4.0863e-02,  ..., -3.8269e-02,
         -2.7267e-02, -2.0920e-02],
        [-5.5885e-03, -1.3268e-02, -1.7212e-02,  ..., -1.5335e-02,
          1.4351e-02, -2.4994e-02],
        ...,
        [-1.9669e-02,  2.2934e-02,  1.4168e-02,  ..., -3.1281e-02,
         -5.7892e-02, -9.4299e-03],
        [ 6.5956e-03,  2.7990e-04, -1.4982e-03,  ..., -5.5389e-02,
         -4.1237e-03, -8.0168e-05],
        [ 1.5030e-02,  2.4551e-02, -1.3466e-02,  ..., -2.1652e-02,
         -3.5324e-03, -1.8799e-02]], device='cuda:1', dtype=torch.float16)
key:product
v:tensor([[ 0.0016,  0.0091, -0.0170,  ..., -0.0134, -0.0182, -0.0211],
        [-0.0027, -0.0028, -0.0261,  ..., -0.0375, -0.0268, -0.0174],
        [-0.0177,  0.0174, -0.0193,  ...,  0.0132,  0.0088, -0.0157],
        ...,
        [-0.0278,  0.0488,  0.0133,  ..., -0.0247, -0.0363, -0.0162],
        [-0.0254,  0.0153, -0.0017,  ..., -0.0436, -0.0018, -0.0106],
        [-0.0022,  0.0274, -0.0058,  ...,  0.0243,  0.0201, -0.0086]],
       device='cuda:1', dtype=torch.float16)
key:real_world
v:tensor([[ 0.0163,  0.0051, -0.0443,  ..., -0.0367, -0.0162, -0.0193],
        [ 0.0065, -0.0147, -0.0381,  ..., -0.0271, -0.0146, -0.0193],
        [-0.0103,  0.0017, -0.0167,  ...,  0.0077,  0.0258, -0.0103],
        ...,
        [-0.0206,  0.0394,  0.0136,  ..., -0.0408, -0.0177, -0.0170],
        [-0.0216,  0.0202, -0.0051,  ..., -0.0460,  0.0089, -0.0129],
        [ 0.0082,  0.0139, -0.0236,  ..., -0.0154,  0.0071, -0.0110]],
       device='cuda:1', dtype=torch.float16)
Turning Off Gradients in Image and Text Encoder
Parameters to be updated: {'adapters.2.fc.2.weight', 'adapters.1.fc.2.weight', 'adapters.0.fc.0.weight', 'adapters.0.fc.2.weight', 'adapters.1.fc.0.weight', 'adapters.2.fc.0.weight', 'adapter.fc.0.weight', 'adapter.fc.2.weight'}
Build Evaluator: Classification
epoch [1/1] batch [5/156] loss -29.7656 (-31.2969) acc 17.1875 (16.8750) lr 1.0000e-05 eta 0:00:50
epoch [1/1] batch [10/156] loss -42.7812 (-32.0578) acc 18.7500 (17.6562) lr 1.0000e-05 eta 0:00:31
epoch [1/1] batch [15/156] loss -35.3438 (-34.1344) acc 15.6250 (16.6667) lr 1.0000e-05 eta 0:00:24
epoch [1/1] batch [20/156] loss -41.0000 (-35.4039) acc 18.7500 (16.7188) lr 1.0000e-05 eta 0:00:21
epoch [1/1] batch [25/156] loss -29.8281 (-34.4612) acc 18.7500 (16.8125) lr 1.0000e-05 eta 0:00:19
epoch [1/1] batch [30/156] loss -39.3438 (-34.5495) acc 14.0625 (16.5104) lr 1.0000e-05 eta 0:00:17
epoch [1/1] batch [35/156] loss -36.0312 (-34.6835) acc 28.1250 (16.9196) lr 1.0000e-05 eta 0:00:16
epoch [1/1] batch [40/156] loss -24.5625 (-33.9180) acc 21.8750 (17.0703) lr 1.0000e-05 eta 0:00:14
epoch [1/1] batch [45/156] loss -42.5938 (-34.6201) acc 17.1875 (16.9097) lr 1.0000e-05 eta 0:00:14
epoch [1/1] batch [50/156] loss -32.4062 (-34.5866) acc 15.6250 (16.6875) lr 1.0000e-05 eta 0:00:13
epoch [1/1] batch [55/156] loss -31.1094 (-34.7134) acc 21.8750 (16.6761) lr 1.0000e-05 eta 0:00:12
epoch [1/1] batch [60/156] loss -39.0938 (-34.7518) acc 12.5000 (16.3802) lr 1.0000e-05 eta 0:00:11
epoch [1/1] batch [65/156] loss -38.0938 (-34.6130) acc 21.8750 (16.5625) lr 1.0000e-05 eta 0:00:10
epoch [1/1] batch [70/156] loss -27.4844 (-34.7692) acc 7.8125 (16.2277) lr 1.0000e-05 eta 0:00:10
epoch [1/1] batch [75/156] loss -28.0938 (-34.8183) acc 17.1875 (16.3750) lr 1.0000e-05 eta 0:00:09
epoch [1/1] batch [80/156] loss -33.5000 (-34.9422) acc 14.0625 (16.2695) lr 1.0000e-05 eta 0:00:08
epoch [1/1] batch [85/156] loss -34.3125 (-34.7340) acc 14.0625 (16.3971) lr 1.0000e-05 eta 0:00:08
epoch [1/1] batch [90/156] loss -40.3438 (-34.5953) acc 18.7500 (16.2847) lr 1.0000e-05 eta 0:00:07
epoch [1/1] batch [95/156] loss -32.3438 (-34.7627) acc 25.0000 (16.4638) lr 1.0000e-05 eta 0:00:06
epoch [1/1] batch [100/156] loss -27.5625 (-34.9206) acc 4.6875 (16.2969) lr 1.0000e-05 eta 0:00:06
epoch [1/1] batch [105/156] loss -27.8750 (-34.8935) acc 14.0625 (16.2649) lr 1.0000e-05 eta 0:00:05
epoch [1/1] batch [110/156] loss -33.5312 (-34.9403) acc 14.0625 (16.3494) lr 1.0000e-05 eta 0:00:05
epoch [1/1] batch [115/156] loss -23.3750 (-34.8880) acc 15.6250 (16.2364) lr 1.0000e-05 eta 0:00:04
epoch [1/1] batch [120/156] loss -42.5000 (-34.9150) acc 14.0625 (16.2630) lr 1.0000e-05 eta 0:00:03
epoch [1/1] batch [125/156] loss -39.7188 (-34.9840) acc 20.3125 (16.3000) lr 1.0000e-05 eta 0:00:03
epoch [1/1] batch [130/156] loss -31.3281 (-34.9250) acc 17.1875 (16.2861) lr 1.0000e-05 eta 0:00:02
epoch [1/1] batch [135/156] loss -32.2812 (-34.8659) acc 10.9375 (16.2269) lr 1.0000e-05 eta 0:00:02
epoch [1/1] batch [140/156] loss -25.1250 (-34.7579) acc 17.1875 (16.2835) lr 1.0000e-05 eta 0:00:01
epoch [1/1] batch [145/156] loss -32.3125 (-34.7231) acc 20.3125 (16.1638) lr 1.0000e-05 eta 0:00:01
epoch [1/1] batch [150/156] loss -34.6875 (-34.5680) acc 15.6250 (16.2292) lr 1.0000e-05 eta 0:00:00
epoch [1/1] batch [155/156] loss -40.7812 (-34.7031) acc 12.5000 (16.1492) lr 1.0000e-05 eta 0:00:00
Model Saved to: output/CLIPAdapter-ViTB32-OfficeHome-art/model.pth.tar-1
Finish Training
Evaluate on the Test Set
Model output: tensor([[27.9062, 17.1719, 19.0312,  ..., 18.0625, 16.4844, 22.6250],
        [24.4062, 19.3906, 19.4375,  ..., 19.3750, 17.7500, 19.7188],
        [28.4531, 18.0781, 19.8125,  ..., 19.3438, 17.8906, 21.5000],
        ...,
        [18.7812, 28.7969, 19.8750,  ..., 19.6719, 20.4688, 18.4219],
        [22.5156, 30.1250, 23.2656,  ..., 20.7500, 21.5469, 21.0938],
        [24.9062, 26.0781, 21.3594,  ..., 21.3594, 20.8438, 20.8594]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[20.0625, 30.3125, 19.0469,  ..., 19.7500, 20.6562, 18.2500],
        [19.7656, 32.1250, 20.8281,  ..., 20.0156, 23.2812, 20.5000],
        [21.1875, 29.0781, 20.7188,  ..., 21.6406, 20.0469, 18.6875],
        ...,
        [24.8750, 18.1250, 28.0469,  ..., 18.5938, 16.1406, 18.9219],
        [21.5625, 20.3594, 30.5156,  ..., 20.2812, 21.2969, 20.0625],
        [22.4062, 17.1094, 32.2812,  ..., 19.4062, 20.1719, 16.3594]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[23.2812, 16.7500, 25.0781,  ..., 17.1562, 20.3594, 19.4688],
        [19.5625, 15.1484, 24.9375,  ..., 17.5156, 19.0312, 17.0781],
        [24.9219, 23.5938, 25.0000,  ..., 20.6875, 22.2969, 25.8750],
        ...,
        [27.7969, 19.4688, 21.9062,  ..., 21.5938, 18.0000, 23.6406],
        [24.9375, 17.3438, 20.6562,  ..., 21.2344, 17.0938, 21.9219],
        [27.9844, 19.8594, 22.4688,  ..., 21.3281, 17.9844, 23.1719]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[28.5156, 21.2969, 25.7812,  ..., 20.0156, 18.4844, 24.2656],
        [26.6094, 18.5625, 22.7656,  ..., 21.2500, 16.7188, 22.2344],
        [26.3750, 22.9688, 22.5000,  ..., 20.1875, 20.5312, 21.3281],
        ...,
        [17.4062, 16.9531, 17.6406,  ..., 18.6562, 15.9141, 18.2812],
        [18.5156, 18.4219, 19.1406,  ..., 21.2969, 17.5469, 17.8281],
        [21.1875, 20.8750, 21.5000,  ..., 22.8125, 18.0000, 17.8281]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[23.2656, 23.6875, 27.5938,  ..., 21.4688, 21.7812, 22.4062],
        [18.9844, 18.2969, 19.0156,  ..., 20.0781, 17.9688, 17.9375],
        [17.0625, 17.3906, 18.4219,  ..., 19.2969, 14.9531, 16.8594],
        ...,
        [17.2188, 16.3750, 20.3906,  ..., 21.9531, 15.4062, 17.9375],
        [20.9844, 21.6406, 20.6719,  ..., 21.1875, 18.8594, 21.2031],
        [20.1562, 20.5469, 20.5000,  ..., 21.2500, 18.9062, 21.0938]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[19.3438, 19.9844, 17.2969,  ..., 20.6094, 18.5312, 18.7188],
        [20.8750, 21.5469, 21.0156,  ..., 20.7969, 18.5469, 18.8906],
        [13.1172, 15.3750, 13.0156,  ..., 18.7656, 16.8125, 17.1875],
        ...,
        [23.7344, 21.7969, 23.8906,  ..., 21.0469, 22.5312, 21.5469],
        [23.0625, 20.3906, 20.9844,  ..., 19.4688, 20.8125, 21.0781],
        [20.5156, 19.8750, 20.0000,  ..., 19.3281, 20.8125, 18.4531]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[20.2656, 21.6875, 24.7656,  ..., 22.6406, 21.2812, 20.6719],
        [23.4531, 20.9688, 21.1875,  ..., 20.2188, 21.0312, 19.1094],
        [23.4531, 20.5781, 22.2812,  ..., 20.1875, 21.1094, 21.9688],
        ...,
        [24.3438, 23.9844, 23.1094,  ..., 20.9688, 24.6875, 24.3906],
        [23.1875, 20.8125, 23.6719,  ..., 19.5781, 20.8281, 22.9062],
        [24.1875, 22.7500, 23.9531,  ..., 21.2812, 24.6875, 22.7656]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.9688, 23.6250, 22.5781,  ..., 20.2344, 22.6094, 21.5000],
        [21.6875, 20.9219, 23.7031,  ..., 21.6562, 23.7812, 23.4688],
        [23.8281, 20.5312, 19.6562,  ..., 20.7969, 20.4375, 22.5156],
        ...,
        [25.7656, 20.6562, 25.0000,  ..., 21.0312, 18.5312, 23.2969],
        [21.6094, 17.0938, 20.4375,  ..., 18.5156, 16.2188, 18.6406],
        [21.5156, 20.6094, 22.2188,  ..., 19.0000, 16.7031, 18.0938]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[24.3125, 19.0312, 23.5781,  ..., 19.4844, 21.5469, 22.6250],
        [24.4844, 20.6875, 23.7500,  ..., 21.3125, 17.6250, 20.6562],
        [24.6406, 20.2812, 22.3438,  ..., 20.5312, 17.2500, 19.3750],
        ...,
        [25.2812, 20.3438, 21.6719,  ..., 17.5625, 18.5312, 19.9688],
        [18.9062, 19.2812, 18.7188,  ..., 18.0625, 16.9375, 18.2656],
        [21.0781, 21.0938, 19.4375,  ..., 17.7656, 16.3438, 18.1094]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[21.2188, 17.2344, 18.3438,  ..., 16.5469, 15.9531, 21.2031],
        [21.9688, 18.9688, 20.2969,  ..., 17.3594, 16.2656, 18.2812],
        [21.6094, 18.9062, 19.9531,  ..., 17.3438, 13.9219, 16.5000],
        ...,
        [19.5938, 16.1562, 22.7344,  ..., 20.5156, 14.9062, 16.3906],
        [19.8906, 18.8906, 20.9062,  ..., 18.8125, 17.2969, 18.7969],
        [19.9219, 16.5312, 19.2188,  ..., 18.3281, 16.0781, 17.8906]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[20.3438, 18.5781, 20.9531,  ..., 19.2812, 19.2344, 18.0625],
        [23.4531, 21.1406, 23.4219,  ..., 19.4375, 20.4844, 20.7812],
        [20.6875, 17.4062, 21.7656,  ..., 19.4531, 17.9062, 17.5625],
        ...,
        [21.3594, 21.8438, 20.0156,  ..., 21.2031, 20.6250, 22.0625],
        [17.5469, 21.8750, 18.1406,  ..., 19.7188, 18.6562, 21.3594],
        [22.1406, 23.3125, 21.7500,  ..., 20.3594, 21.2656, 22.9375]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[21.7188, 22.5312, 19.7500,  ..., 20.5781, 19.6562, 24.3906],
        [20.0469, 19.2656, 16.3906,  ..., 20.0469, 18.4844, 20.4062],
        [20.9844, 23.2188, 20.4219,  ..., 21.6250, 20.4844, 23.1250],
        ...,
        [20.6094, 22.9688, 19.5625,  ..., 21.6875, 19.8906, 21.1562],
        [20.1406, 23.5000, 21.7344,  ..., 20.6719, 21.3438, 24.4844],
        [22.2812, 19.6562, 20.6719,  ..., 20.4688, 18.4844, 22.0469]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[18.1875, 18.1250, 17.4844,  ..., 19.8750, 18.1875, 19.0312],
        [21.1562, 19.0469, 19.0625,  ..., 21.5312, 19.2031, 21.2031],
        [19.8906, 23.1875, 19.9375,  ..., 21.9219, 20.3438, 22.9062],
        ...,
        [23.0000, 20.4219, 22.3906,  ..., 24.6406, 21.6562, 26.7031],
        [19.2344, 16.4531, 23.2969,  ..., 22.1719, 17.4062, 21.0156],
        [24.5312, 21.2656, 22.7812,  ..., 22.9844, 23.9062, 23.6875]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.3438, 18.7188, 22.6406,  ..., 20.9531, 20.8125, 22.2344],
        [22.2812, 21.7344, 23.6562,  ..., 22.8906, 21.2031, 22.5625],
        [22.7969, 21.1719, 22.8438,  ..., 21.5938, 18.8125, 26.9375],
        ...,
        [22.0938, 19.9062, 20.6094,  ..., 20.7188, 19.5469, 25.9531],
        [21.1562, 18.7969, 21.0781,  ..., 21.8594, 19.0156, 26.0156],
        [22.0781, 20.4219, 23.4531,  ..., 21.1094, 19.8906, 20.5156]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[20.0156, 19.6250, 19.8906,  ..., 20.6562, 19.3281, 26.3438],
        [25.8438, 20.4062, 22.5156,  ..., 20.9844, 20.3438, 25.5156],
        [22.7031, 21.1094, 21.9219,  ..., 22.2344, 20.1406, 25.8750],
        ...,
        [24.1719, 19.8438, 19.9062,  ..., 19.2031, 17.3125, 22.5469],
        [25.2031, 23.3750, 26.3438,  ..., 20.6875, 21.4688, 22.5312],
        [22.1875, 20.5312, 20.9531,  ..., 20.6406, 20.2031, 21.7656]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[21.6406, 19.1094, 19.7969,  ..., 18.5000, 17.0938, 21.7969],
        [20.8281, 19.2188, 20.7031,  ..., 20.5156, 17.7344, 21.9688],
        [20.9062, 21.0469, 18.7812,  ..., 20.8594, 21.5312, 21.6875],
        ...,
        [22.1562, 22.1562, 20.7031,  ..., 18.7500, 17.9688, 20.9531],
        [21.0781, 18.9844, 17.0625,  ..., 18.7500, 16.8281, 19.4844],
        [23.3906, 20.2344, 24.0938,  ..., 21.4375, 18.4375, 24.2969]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[23.9062, 19.2344, 20.8906,  ..., 20.8750, 21.3594, 22.1562],
        [21.2344, 18.8281, 21.7969,  ..., 19.9844, 20.1562, 20.6719],
        [25.4688, 22.4062, 21.4219,  ..., 20.0156, 20.8125, 21.3125],
        ...,
        [24.9844, 22.0781, 27.9531,  ..., 22.8906, 22.6875, 23.8594],
        [25.0156, 25.0938, 24.5000,  ..., 21.7812, 22.2812, 22.9062],
        [20.4062, 20.7656, 21.4688,  ..., 21.1250, 17.7969, 20.1875]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[23.9375, 20.2656, 26.2656,  ..., 20.9219, 18.3125, 20.9844],
        [25.4062, 24.0938, 27.5625,  ..., 23.3438, 23.9062, 23.9062],
        [22.2812, 19.1562, 27.6094,  ..., 22.0156, 17.6250, 20.7969],
        ...,
        [16.8750, 17.7969, 16.4531,  ..., 18.6406, 17.1875, 18.5781],
        [18.2656, 16.2500, 15.2500,  ..., 17.1719, 15.9375, 17.2344],
        [23.9531, 17.7500, 17.7969,  ..., 23.2188, 18.9688, 23.3594]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[25.1094, 21.5156, 27.3438,  ..., 22.4375, 22.2656, 25.1562],
        [22.5312, 19.0938, 21.4062,  ..., 21.7031, 18.2188, 22.6719],
        [23.5625, 18.9531, 25.3125,  ..., 19.6406, 16.1250, 20.1562],
        ...,
        [22.9844, 20.0781, 24.8594,  ..., 22.2969, 24.7656, 22.1719],
        [20.6250, 18.3750, 25.7031,  ..., 20.7656, 19.8281, 21.3125],
        [23.7969, 20.6875, 26.5781,  ..., 22.8125, 23.1250, 23.5312]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[23.8750, 20.2031, 25.9688,  ..., 22.7500, 21.1094, 21.6094],
        [22.3438, 17.4688, 21.9688,  ..., 21.7969, 18.4844, 21.8438],
        [23.0781, 19.8750, 24.7031,  ..., 21.8125, 24.2188, 22.5469],
        ...,
        [21.8750, 18.5469, 18.6719,  ..., 17.5469, 15.6562, 18.5000],
        [22.0469, 18.2031, 20.7344,  ..., 18.1562, 18.4062, 19.7344],
        [22.7656, 19.3750, 19.8906,  ..., 18.5469, 18.2812, 19.8594]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.0469, 16.7188, 19.3594,  ..., 17.9531, 17.0625, 21.1875],
        [24.2344, 17.4219, 21.3281,  ..., 19.7344, 18.8594, 21.9531],
        [21.9688, 17.7500, 17.8125,  ..., 18.8750, 16.6406, 20.3438],
        ...,
        [22.4688, 17.8281, 21.1875,  ..., 19.3125, 18.3281, 21.0156],
        [23.8438, 17.6562, 20.2344,  ..., 19.0938, 17.8906, 21.7656],
        [22.0312, 18.4375, 19.9219,  ..., 18.7500, 18.8906, 20.0469]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[20.5625, 19.1562, 19.5000,  ..., 18.9531, 17.9219, 19.2344],
        [23.8906, 21.4688, 23.8750,  ..., 21.9688, 21.0625, 22.0781],
        [20.2969, 17.0000, 18.7344,  ..., 19.3906, 17.8750, 19.8594],
        ...,
        [22.0781, 20.7500, 22.6719,  ..., 20.6719, 19.4062, 20.4688],
        [22.6719, 21.5312, 22.7656,  ..., 20.5625, 19.5156, 23.9219],
        [21.9844, 21.7812, 22.6562,  ..., 20.7812, 22.0156, 22.3125]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[24.0156, 21.7188, 23.2344,  ..., 21.1719, 21.2969, 22.2344],
        [23.7812, 23.4219, 24.7969,  ..., 20.7656, 20.6406, 23.1250],
        [17.3750, 18.2188, 20.1406,  ..., 18.5781, 18.0156, 19.3594],
        ...,
        [20.0938, 18.4219, 17.9844,  ..., 21.5469, 18.4375, 20.5312],
        [21.3281, 18.8594, 24.6094,  ..., 21.5625, 16.9531, 16.7812],
        [20.4688, 18.1562, 19.0938,  ..., 19.2031, 18.0000, 19.0938]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[21.2812, 18.4219, 21.5625,  ..., 21.7812, 18.2656, 21.4531],
        [20.2656, 19.0312, 18.7969,  ..., 20.4375, 19.0156, 19.9531],
        [22.9375, 21.4531, 22.5000,  ..., 22.2969, 22.0469, 22.1719],
        ...,
        [20.0625, 23.1719, 19.2031,  ..., 20.6406, 18.9219, 22.9531],
        [21.7188, 20.7812, 19.0625,  ..., 20.3438, 20.1562, 23.7031],
        [20.9531, 20.8281, 19.1250,  ..., 19.7969, 17.7500, 22.2656]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[20.8281, 20.4688, 18.6406,  ..., 20.5469, 18.4531, 21.9062],
        [20.6406, 20.8594, 19.3438,  ..., 20.1875, 17.7344, 21.8594],
        [22.5469, 22.7656, 22.1875,  ..., 20.7344, 20.1094, 22.0938],
        ...,
        [24.3438, 22.1250, 21.0000,  ..., 22.4844, 20.5312, 26.4844],
        [22.6406, 19.7344, 20.1250,  ..., 23.9219, 19.4062, 21.4688],
        [21.4688, 19.6562, 21.2031,  ..., 20.7031, 20.7188, 23.5625]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[21.3750, 19.5781, 21.1094,  ..., 22.2500, 21.3906, 23.8906],
        [23.0000, 19.3594, 22.5156,  ..., 21.5000, 18.9531, 21.8281],
        [21.8750, 18.7188, 22.2969,  ..., 20.8906, 20.0625, 20.5781],
        ...,
        [20.0781, 19.2031, 20.0938,  ..., 19.3750, 17.5625, 19.1406],
        [22.7812, 24.3906, 22.0312,  ..., 23.0469, 20.9844, 23.4688],
        [19.0469, 20.5781, 20.6562,  ..., 19.7812, 17.9531, 18.0312]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[23.7969, 22.0625, 22.6094,  ..., 22.2188, 20.4531, 24.6719],
        [20.3906, 19.6250, 20.8281,  ..., 20.0000, 19.4219, 21.4219],
        [19.1562, 18.9688, 20.1094,  ..., 19.5312, 17.5312, 19.9062],
        ...,
        [22.5312, 23.4219, 20.9375,  ..., 20.0781, 22.8438, 21.5312],
        [23.8281, 18.5781, 17.5312,  ..., 19.4062, 20.6094, 21.2969],
        [24.5625, 20.2031, 18.2500,  ..., 18.8750, 19.8594, 19.7969]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[23.1406, 23.2500, 19.1250,  ..., 19.5781, 21.8906, 21.5625],
        [21.2812, 16.2500, 14.7812,  ..., 18.0938, 18.3281, 17.9062],
        [22.1406, 16.7188, 16.3281,  ..., 17.6875, 18.2812, 19.6406],
        ...,
        [21.7812, 21.4219, 22.4062,  ..., 22.0938, 18.2188, 20.6250],
        [20.9844, 21.8594, 22.7656,  ..., 21.0469, 19.0781, 22.5000],
        [19.0625, 18.9062, 20.3594,  ..., 20.7812, 19.1250, 25.3594]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[25.7656, 20.7969, 28.1562,  ..., 22.1250, 22.3281, 22.0312],
        [20.4062, 17.5938, 23.2188,  ..., 21.1875, 13.8906, 19.6094],
        [19.9062, 19.9062, 24.9531,  ..., 20.7969, 18.0781, 19.4844],
        ...,
        [22.5312, 19.8906, 20.8281,  ..., 20.2031, 19.6094, 21.8281],
        [23.8438, 20.6406, 20.0469,  ..., 21.2812, 18.7188, 21.8438],
        [25.5781, 23.0938, 25.8281,  ..., 21.9375, 20.2344, 21.0781]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[24.4219, 24.3750, 23.4688,  ..., 20.4062, 22.5469, 22.5938],
        [23.0625, 20.0625, 24.2969,  ..., 21.9531, 21.5938, 23.7969],
        [25.4531, 26.4219, 26.6094,  ..., 20.9844, 22.7188, 22.9688],
        ...,
        [21.3125, 20.7031, 22.3281,  ..., 21.0938, 19.1406, 24.3750],
        [23.6250, 23.6094, 24.6719,  ..., 22.0938, 21.7656, 24.6875],
        [21.3750, 18.0625, 18.6406,  ..., 19.9062, 17.5312, 22.6875]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[19.5000, 19.5000, 19.0156,  ..., 18.6250, 17.4219, 26.0000],
        [16.8906, 18.3594, 19.2188,  ..., 20.8594, 17.3438, 23.6250],
        [24.1094, 23.0781, 23.3281,  ..., 21.0625, 20.3750, 25.6094],
        ...,
        [20.9531, 19.9531, 21.9688,  ..., 20.8906, 19.3281, 25.3125],
        [17.2500, 17.1094, 19.3906,  ..., 20.1094, 16.3125, 23.2969],
        [20.8438, 20.8281, 22.6094,  ..., 20.4062, 19.1875, 24.7656]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[23.5156, 19.8594, 24.1094,  ..., 21.2188, 18.1094, 25.3594],
        [20.8750, 20.2812, 21.2500,  ..., 20.5000, 18.7031, 24.9531],
        [21.3125, 20.4375, 20.7500,  ..., 19.9844, 18.8906, 24.0938],
        ...,
        [20.9375, 19.9688, 25.8594,  ..., 21.5000, 18.2656, 21.6094],
        [21.6562, 20.7500, 23.9375,  ..., 21.2812, 18.2188, 20.0938],
        [18.5156, 21.9688, 24.8438,  ..., 22.0625, 18.7812, 19.3125]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[23.2344, 21.6094, 27.7344,  ..., 20.6562, 19.6875, 23.0312],
        [22.3906, 20.7031, 23.3438,  ..., 21.4219, 20.5000, 22.0469],
        [26.4844, 19.2969, 24.9531,  ..., 19.6250, 21.9531, 24.7344],
        ...,
        [28.2812, 23.7969, 24.6250,  ..., 23.1719, 21.7188, 28.8906],
        [21.7031, 22.5469, 22.6094,  ..., 22.1719, 21.0781, 26.5781],
        [22.2500, 20.8125, 22.8281,  ..., 22.0781, 20.4375, 26.7812]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[20.7344, 19.6562, 20.0312,  ..., 21.7344, 19.1719, 28.6719],
        [24.2656, 19.2344, 23.3125,  ..., 18.4219, 18.4375, 23.4688],
        [22.6875, 22.5625, 24.1562,  ..., 19.9219, 19.9062, 21.0625],
        ...,
        [21.7812, 18.5312, 17.5469,  ..., 20.1250, 17.8750, 20.2969],
        [23.7812, 18.2031, 23.2344,  ..., 20.3594, 23.3906, 20.9531],
        [21.9062, 17.8750, 19.8906,  ..., 19.8750, 17.6875, 21.1562]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[21.5312, 17.4531, 20.2031,  ..., 20.0469, 22.2812, 19.3438],
        [23.1406, 19.2812, 23.1094,  ..., 20.9375, 24.3438, 22.2344],
        [20.2344, 18.1875, 20.3125,  ..., 18.6875, 18.5156, 21.2344],
        ...,
        [22.5625, 23.8281, 23.9219,  ..., 21.5938, 21.6406, 23.8125],
        [28.4062, 24.0938, 25.1719,  ..., 20.4062, 20.6406, 23.7188],
        [23.2344, 23.2500, 23.5469,  ..., 19.6562, 21.0625, 21.7344]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[23.6250, 23.4531, 24.8125,  ..., 21.6406, 20.4219, 24.5938],
        [22.0312, 23.8125, 21.6875,  ..., 20.4062, 21.7188, 23.2969],
        [24.7812, 21.7500, 26.4062,  ..., 21.8906, 23.8594, 26.3750],
        ...,
        [23.9844, 18.7812, 19.5312,  ..., 19.5469, 20.3594, 21.4688],
        [19.8906, 18.3438, 17.5469,  ..., 19.3750, 19.6562, 19.5781],
        [24.0312, 19.6562, 20.3281,  ..., 19.3906, 21.6250, 22.9688]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[24.9844, 19.2500, 22.3438,  ..., 20.1250, 22.5469, 22.2188],
        [23.7344, 17.1250, 19.0938,  ..., 18.7969, 19.6562, 21.0156],
        [25.3750, 19.3906, 21.5312,  ..., 18.8750, 22.1094, 22.0781],
        ...,
        [22.7656, 22.3594, 23.7500,  ..., 20.9062, 18.7500, 20.6406],
        [24.0625, 20.0000, 24.3594,  ..., 20.9375, 17.9844, 22.6875],
        [25.1562, 22.8594, 25.0156,  ..., 19.8594, 18.6094, 22.1719]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[25.4375, 23.9531, 25.7500,  ..., 21.3750, 21.6250, 25.5469],
        [24.8125, 23.7188, 25.2344,  ..., 21.3750, 20.4844, 25.1250],
        [21.3906, 21.5156, 20.9062,  ..., 21.1562, 18.7344, 21.4375],
        ...,
        [26.1094, 20.2031, 24.0625,  ..., 23.5312, 21.9688, 25.5156],
        [24.3906, 20.3281, 26.3281,  ..., 22.6875, 23.1094, 20.5312],
        [22.0312, 19.5469, 19.3594,  ..., 20.5312, 19.1406, 21.2344]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.0312, 19.5469, 19.3594,  ..., 20.5312, 19.1406, 21.2344],
        [22.1562, 19.7188, 19.2812,  ..., 20.8125, 19.7344, 21.4531],
        [24.8125, 21.8438, 26.9062,  ..., 20.0625, 22.0781, 22.2344],
        ...,
        [23.4844, 19.9062, 20.6875,  ..., 22.6250, 24.0625, 23.4844],
        [23.1250, 22.4375, 24.5469,  ..., 20.9844, 21.4062, 23.4531],
        [23.8906, 24.7031, 24.9219,  ..., 20.8906, 21.7188, 23.8594]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.4531, 21.1094, 23.0312,  ..., 20.8281, 19.9375, 23.1719],
        [22.3594, 21.0781, 23.3281,  ..., 21.8750, 18.1719, 21.5312],
        [23.0156, 23.0938, 25.2188,  ..., 21.0781, 23.0625, 23.0625],
        ...,
        [22.2031, 20.2969, 22.2812,  ..., 19.9531, 18.2500, 22.4375],
        [21.0938, 19.3906, 21.1094,  ..., 20.8750, 18.6250, 22.3281],
        [23.2344, 23.1094, 21.7969,  ..., 20.9531, 21.7188, 21.7656]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[20.1562, 21.4688, 23.1562,  ..., 23.6719, 18.5469, 20.2188],
        [20.9531, 20.0938, 23.4688,  ..., 22.1562, 19.3438, 22.4219],
        [22.5469, 21.2656, 23.2969,  ..., 20.5625, 18.4531, 21.7656],
        ...,
        [23.1562, 21.2656, 28.7031,  ..., 20.5156, 21.0469, 22.5000],
        [20.8750, 19.1719, 25.9062,  ..., 20.8125, 19.7656, 21.3750],
        [22.4844, 22.5000, 24.0469,  ..., 22.5000, 20.8125, 23.6875]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[21.1562, 20.8906, 23.1250,  ..., 21.1406, 18.9219, 20.3906],
        [20.4531, 22.6406, 26.7812,  ..., 22.5781, 20.3281, 20.7812],
        [21.0625, 19.4688, 22.2031,  ..., 19.0625, 18.1250, 20.1094],
        ...,
        [22.0938, 19.8125, 24.9531,  ..., 19.9219, 19.7812, 20.8594],
        [18.7500, 20.9219, 23.0312,  ..., 21.6875, 18.5000, 18.0938],
        [22.5781, 22.2188, 23.8281,  ..., 22.6562, 19.0156, 21.2656]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[17.8281, 20.7969, 19.8906,  ..., 19.3125, 18.4062, 21.4688],
        [20.3438, 21.2188, 21.6250,  ..., 19.4844, 18.2188, 18.5625],
        [22.5625, 19.6562, 23.4531,  ..., 20.1094, 20.5469, 23.0781],
        ...,
        [22.8750, 22.4688, 26.7500,  ..., 22.0000, 21.6719, 26.8125],
        [22.7656, 21.7969, 24.2188,  ..., 20.4219, 21.5000, 24.3750],
        [23.5312, 21.8750, 26.5312,  ..., 21.0938, 22.5000, 23.9062]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.6719, 19.7031, 25.0625,  ..., 21.4219, 21.5625, 23.7656],
        [22.5938, 21.5000, 22.7656,  ..., 19.6406, 21.5312, 23.5625],
        [20.9375, 19.4844, 21.4219,  ..., 19.5781, 19.3281, 22.6250],
        ...,
        [22.1406, 17.0781, 21.5469,  ..., 20.0625, 18.4688, 26.9062],
        [24.9531, 21.5156, 27.2344,  ..., 21.6250, 24.7812, 23.0000],
        [21.9844, 18.7344, 24.6719,  ..., 20.0469, 20.2500, 22.7969]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[20.7031, 19.8594, 23.4531,  ..., 18.5625, 19.1562, 19.1875],
        [21.5469, 17.5156, 21.5469,  ..., 21.5781, 21.1094, 21.6094],
        [19.2344, 20.5000, 22.3750,  ..., 18.5781, 20.8281, 21.4531],
        ...,
        [25.7969, 17.9844, 21.7969,  ..., 20.2031, 15.8203, 19.3594],
        [25.7656, 22.0938, 28.8125,  ..., 22.3594, 19.2344, 20.6875],
        [26.0312, 17.5938, 22.4219,  ..., 19.9844, 15.6797, 21.0156]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[24.7969, 24.2969, 26.4375,  ..., 21.7344, 22.1094, 21.3281],
        [22.5000, 19.2812, 20.5781,  ..., 19.8438, 17.5000, 19.4844],
        [27.4531, 22.3438, 29.8594,  ..., 21.2656, 19.9688, 24.7656],
        ...,
        [21.2031, 21.7188, 24.0938,  ..., 19.9062, 21.0938, 23.2969],
        [22.4844, 19.3281, 25.0156,  ..., 19.6094, 20.6719, 23.6719],
        [25.3281, 24.1406, 28.1719,  ..., 21.3906, 22.8906, 26.3438]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[25.2969, 18.8281, 24.8594,  ..., 22.0625, 16.9219, 22.3906],
        [27.5469, 19.4844, 26.7812,  ..., 20.5625, 17.0781, 21.5312],
        [27.6719, 22.0156, 27.8438,  ..., 21.7188, 22.1875, 25.9844],
        ...,
        [20.3125, 20.1094, 20.2188,  ..., 20.1719, 17.0469, 19.4844],
        [21.7812, 16.5469, 20.2656,  ..., 22.3281, 16.4531, 22.8125],
        [21.5156, 20.3281, 21.1406,  ..., 23.5000, 18.6406, 22.5625]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.7656, 20.1875, 23.7969,  ..., 22.0781, 20.2656, 23.6719],
        [24.3125, 19.6875, 23.2344,  ..., 22.6875, 18.7812, 24.5000],
        [21.9375, 22.6406, 21.7500,  ..., 24.2969, 18.5781, 23.2188],
        ...,
        [21.7812, 16.7500, 20.8281,  ..., 22.2344, 15.2188, 22.1875],
        [20.7344, 18.0625, 20.1562,  ..., 22.0312, 15.0469, 21.0000],
        [20.7656, 20.2500, 21.5625,  ..., 23.0938, 17.5312, 22.7031]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.4844, 23.1719, 21.9219,  ..., 24.1250, 19.2969, 23.5469],
        [21.9219, 17.6719, 20.5156,  ..., 23.0469, 16.4844, 23.1094],
        [21.6562, 17.8125, 22.1094,  ..., 20.0781, 17.9844, 22.0156],
        ...,
        [21.0469, 19.7188, 20.4219,  ..., 22.5781, 19.6094, 23.8906],
        [20.7031, 20.6250, 19.1094,  ..., 19.5938, 19.1875, 17.7812],
        [25.7969, 20.1562, 24.7188,  ..., 21.5312, 23.1719, 25.9375]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.9219, 19.3125, 22.6250,  ..., 22.2188, 19.7500, 22.6250],
        [22.6094, 20.0938, 22.9375,  ..., 22.5625, 18.6250, 22.5938],
        [21.8750, 20.2188, 24.1406,  ..., 21.4062, 20.6406, 20.8750],
        ...,
        [24.4219, 22.4531, 27.8594,  ..., 21.3594, 20.5312, 22.7969],
        [22.2656, 19.5781, 19.0312,  ..., 19.8750, 17.7812, 21.4062],
        [24.0312, 21.7656, 21.1562,  ..., 21.0781, 21.2500, 23.7500]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[20.5625, 17.1250, 19.4375,  ..., 20.1719, 20.7500, 24.8906],
        [20.4062, 16.8125, 17.4375,  ..., 20.5312, 19.3906, 23.3438],
        [20.3906, 15.7422, 15.5391,  ..., 19.6875, 17.0000, 22.2031],
        ...,
        [18.3438, 19.6094, 18.7500,  ..., 19.4531, 14.9531, 17.9219],
        [18.3594, 17.4688, 20.1094,  ..., 17.7969, 16.0625, 17.7969],
        [25.6562, 23.5469, 28.8438,  ..., 22.2500, 26.8125, 23.4844]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[18.7500, 19.4375, 20.2188,  ..., 20.8906, 20.0781, 20.9375],
        [23.3125, 21.6094, 26.3125,  ..., 21.5781, 24.9688, 22.7656],
        [20.0625, 18.8906, 20.5000,  ..., 19.0000, 18.8125, 21.3281],
        ...,
        [25.2656, 20.8438, 22.9844,  ..., 20.4375, 20.8906, 29.4062],
        [24.4219, 19.1250, 22.4844,  ..., 20.5781, 19.8750, 24.7031],
        [24.6875, 21.2969, 24.3750,  ..., 20.6719, 22.5938, 24.0000]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[26.5938, 22.5781, 25.2188,  ..., 21.8750, 22.2344, 27.1406],
        [23.4375, 19.4531, 23.9844,  ..., 19.8750, 20.8750, 23.7969],
        [22.7188, 21.7344, 22.0938,  ..., 20.2344, 21.0156, 23.7812],
        ...,
        [24.1562, 21.2188, 25.2969,  ..., 22.0156, 19.5469, 24.1250],
        [23.7344, 20.6719, 21.9375,  ..., 20.6094, 20.8750, 22.2812],
        [20.4531, 18.3906, 22.3281,  ..., 19.9688, 19.5156, 20.7031]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[23.4844, 20.7969, 21.4219,  ..., 21.7344, 20.8594, 23.8750],
        [27.4062, 18.8750, 23.4688,  ..., 18.8125, 21.5625, 26.8750],
        [27.0469, 26.3750, 26.3281,  ..., 21.3750, 22.6875, 27.3281],
        ...,
        [25.8906, 21.0000, 24.4688,  ..., 20.4375, 20.2969, 26.0938],
        [21.7344, 17.2344, 19.5938,  ..., 19.2344, 17.7500, 26.6250],
        [23.3281, 20.4688, 21.8438,  ..., 21.6875, 19.5312, 27.5625]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[25.4844, 20.4688, 24.0312,  ..., 22.1875, 22.4375, 29.1719],
        [24.7656, 20.9844, 22.7344,  ..., 19.5469, 20.3750, 25.2344],
        [26.3594, 21.1406, 26.0000,  ..., 20.9062, 20.6406, 25.5938],
        ...,
        [22.4062, 18.8594, 21.9219,  ..., 20.7656, 18.3125, 23.7031],
        [22.5625, 19.0938, 22.2500,  ..., 21.5000, 18.5156, 23.1094],
        [23.7188, 20.6719, 21.8750,  ..., 20.9219, 19.4375, 23.9531]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.8281, 20.7969, 22.9219,  ..., 21.6562, 21.0312, 24.8125],
        [25.6406, 20.8594, 22.9062,  ..., 22.2500, 19.7188, 26.3594],
        [23.9688, 20.5938, 20.9219,  ..., 20.7500, 19.9688, 26.2500],
        ...,
        [23.0000, 22.2031, 22.6406,  ..., 21.5781, 23.2031, 24.5000],
        [19.9531, 22.7656, 22.7344,  ..., 21.5469, 17.5312, 20.9688],
        [23.5625, 22.7031, 25.7344,  ..., 21.3438, 22.5625, 22.9062]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[23.0312, 20.0625, 22.1094,  ..., 19.8750, 19.1250, 19.4688],
        [18.5000, 16.9688, 16.7031,  ..., 20.8750, 15.7578, 16.9531],
        [20.2344, 16.8750, 20.0469,  ..., 21.0625, 16.3750, 20.6719],
        ...,
        [21.7031, 20.6562, 22.7344,  ..., 20.2031, 18.8906, 23.5312],
        [23.9062, 21.0156, 22.9844,  ..., 21.3906, 18.3125, 21.9219],
        [24.3750, 21.6562, 22.3125,  ..., 21.1250, 19.0156, 23.7500]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[23.8125, 19.9375, 20.8594,  ..., 20.3594, 16.3750, 23.4844],
        [25.0156, 23.4688, 22.6406,  ..., 20.7812, 19.1875, 23.4375],
        [25.6250, 20.5000, 23.7812,  ..., 21.9531, 18.6875, 23.5625],
        ...,
        [20.5469, 19.9688, 23.0469,  ..., 19.8281, 21.8750, 22.5781],
        [18.4219, 17.7500, 19.8438,  ..., 18.2188, 19.3125, 19.2812],
        [22.3125, 18.4219, 21.8125,  ..., 21.8125, 18.5156, 21.3281]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.2500, 18.6875, 22.6719,  ..., 20.7812, 18.0938, 21.2500],
        [21.2344, 20.7344, 24.9844,  ..., 21.2500, 20.7656, 20.2031],
        [16.7031, 17.4062, 19.8438,  ..., 21.2656, 21.7656, 19.1719],
        ...,
        [22.1719, 18.3438, 26.0312,  ..., 21.3906, 18.0156, 18.7188],
        [24.5156, 21.5312, 20.9844,  ..., 22.9375, 18.7656, 22.7344],
        [21.3281, 20.1562, 19.6719,  ..., 20.9531, 18.6719, 18.7031]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.2656, 21.0781, 22.2188,  ..., 21.0156, 19.4844, 21.6250],
        [21.5156, 21.4531, 16.7656,  ..., 22.1406, 17.8125, 20.6094],
        [23.0469, 20.7344, 21.7969,  ..., 21.7500, 19.4531, 23.0000],
        ...,
        [22.0938, 16.4844, 22.5312,  ..., 18.2344, 24.9688, 20.5469],
        [23.1406, 17.6719, 23.8594,  ..., 18.7344, 25.3750, 20.7656],
        [20.8125, 20.0625, 18.1875,  ..., 21.1875, 25.7656, 20.8906]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[21.7344, 21.3281, 22.1719,  ..., 21.8594, 26.3281, 24.2969],
        [23.4844, 23.7344, 26.4531,  ..., 21.7188, 26.7344, 24.5469],
        [21.9688, 20.2188, 25.1719,  ..., 19.7656, 26.5312, 23.0469],
        ...,
        [23.4062, 20.2656, 21.7031,  ..., 21.1562, 19.2188, 27.5156],
        [23.0312, 20.8438, 20.9531,  ..., 21.0156, 18.7656, 22.6250],
        [27.0625, 19.0781, 22.4844,  ..., 21.6875, 20.2656, 31.3750]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[24.3594, 20.2812, 21.8125,  ..., 21.1094, 20.4375, 29.5156],
        [24.2656, 20.0625, 22.2344,  ..., 21.8906, 23.2812, 31.7812],
        [25.6250, 21.9688, 21.4062,  ..., 21.5938, 20.8438, 27.5156],
        ...,
        [23.4531, 20.0938, 19.2500,  ..., 20.7500, 23.5781, 20.9844],
        [24.7500, 20.6406, 21.5625,  ..., 19.5625, 14.3438, 17.9375],
        [24.2812, 19.4688, 23.4375,  ..., 20.2188, 15.8906, 20.8438]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.8438, 17.6094, 20.9219,  ..., 20.1875, 13.6172, 16.1719],
        [23.8125, 21.3125, 24.7812,  ..., 21.3750, 16.6094, 20.7969],
        [25.8906, 21.5000, 22.8594,  ..., 21.2188, 16.8594, 18.4844],
        ...,
        [23.5469, 18.7031, 21.1719,  ..., 22.8906, 17.6562, 23.2500],
        [23.9375, 21.7344, 23.8438,  ..., 21.7344, 20.6562, 24.5000],
        [20.2188, 19.5625, 23.3125,  ..., 19.8594, 18.7969, 20.3750]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[24.6875, 21.9844, 23.5625,  ..., 23.3594, 19.7656, 24.9531],
        [21.6875, 18.8750, 24.0000,  ..., 22.1406, 17.9375, 23.1250],
        [22.3125, 19.5625, 22.5000,  ..., 23.1719, 17.6094, 22.5000],
        ...,
        [20.6875, 20.1406, 21.0000,  ..., 21.2969, 19.3594, 17.2188],
        [23.5781, 21.8281, 23.8906,  ..., 22.9531, 20.6406, 24.3906],
        [22.2188, 20.5938, 20.1250,  ..., 22.6562, 18.0469, 23.0781]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[22.0000, 20.5156, 20.7188,  ..., 23.4844, 19.1719, 23.8594],
        [25.5312, 22.5781, 23.9844,  ..., 22.2969, 20.6406, 26.0000],
        [21.8125, 18.7812, 20.0938,  ..., 21.5938, 17.4062, 19.8281],
        ...,
        [23.6406, 21.1875, 21.9062,  ..., 21.0469, 21.1250, 27.4219],
        [20.7031, 19.2031, 19.9375,  ..., 20.9375, 20.4062, 27.6406],
        [22.8281, 20.0938, 20.9531,  ..., 21.3906, 21.3438, 21.7656]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[18.6875, 17.7812, 19.2188,  ..., 18.4531, 17.8594, 19.5156],
        [22.2969, 21.8125, 23.8906,  ..., 21.0000, 20.8125, 23.1406],
        [20.7344, 18.7812, 19.7969,  ..., 19.7812, 20.0469, 23.3438],
        ...,
        [21.7344, 22.0938, 23.9531,  ..., 21.7812, 20.5625, 22.3281],
        [20.4531, 21.6250, 20.8438,  ..., 19.6562, 16.4375, 19.3594],
        [19.3438, 19.2344, 22.1875,  ..., 18.6406, 17.2812, 18.4531]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[19.7344, 19.5781, 18.7656,  ..., 19.5781, 18.2500, 18.1562],
        [22.2969, 21.6406, 23.6250,  ..., 20.9844, 21.4219, 23.7188],
        [24.1875, 22.8125, 22.9375,  ..., 21.8750, 23.2188, 26.2500],
        ...,
        [19.1094, 15.8594, 15.7812,  ..., 18.5625, 16.5156, 19.6562],
        [18.5781, 20.3594, 18.6562,  ..., 20.1875, 17.2344, 19.1094],
        [19.6875, 19.5938, 20.4219,  ..., 19.5312, 17.8750, 18.5625]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[18.6875, 19.5156, 20.5938,  ..., 20.4844, 16.8281, 17.7344],
        [17.0625, 18.5469, 18.6719,  ..., 17.7812, 16.3125, 17.7969],
        [18.0938, 20.3750, 20.5000,  ..., 19.6250, 16.3594, 19.4062],
        ...,
        [24.1719, 24.0469, 23.9219,  ..., 20.0312, 21.4688, 20.6250],
        [23.9062, 19.2812, 17.7344,  ..., 21.7500, 18.0156, 22.2656],
        [24.0000, 18.4531, 20.0156,  ..., 22.3750, 15.6406, 21.0625]],
       device='cuda:1', dtype=torch.float16)
Model output: tensor([[24.5000, 18.8438, 18.8125,  ..., 20.6094, 17.5156, 21.7656],
        [23.8281, 18.5312, 20.4531,  ..., 21.6562, 17.1094, 20.5312],
        [22.4375, 20.5000, 20.2969,  ..., 18.4531, 17.1406, 19.9062],
        ...,
        [25.4375, 19.5156, 21.8594,  ..., 21.5000, 19.8125, 28.3750],
        [23.8594, 20.3906, 23.0312,  ..., 20.6094, 20.0000, 24.9219],
        [24.0156, 22.2188, 21.5938,  ..., 20.9844, 19.6406, 26.8281]],
       device='cuda:1', dtype=torch.float16)
----------  ------
Total #     4,365
Correct #   2,894
Accuracy    66.30%
Error Rate  33.70%
Macro_F1    64.41%
----------  ------
